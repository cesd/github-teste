Estado dos arquivo:

UNTRACKED
O arquivo foi criado , mas ainda nao foi visto pelo git

UNMODIFIED
Depois que passa um arquivo para o git ele eh considerado unmodified

MODIFIED
Se vc editar esse arquivo ele passa a ser considerado modified

STAGED
Depois que modifica vc joga ele para o staged para criar uma versao

Comandos

git config --global user.email "cesd.domingues@gmail.com"
git config --global user.name "Carlos Domingues"

git status = Mostra o estado dos aruivos

git add nome_arquivo = Adiciona um arquivo

git commit -m "Add index.html" = Cria uma versao do arquivo (-m para avisar que vai passar uma msg)

git commit -am "editei comentarios"

git log
git log --decorate
git log --author "Carlos"
git log --graph

git shortlog
git shortlog -sn

git show 44ac5068fbe633b748dfec36380e6af84aaa7957

git diff
git diff --name-only

git checkout comentarios.txt (retorna uma modificacao antes do add)

git reset HEAD (remove os arquivo da fila do stage, pos um add e antes do commit)

#reset apos o commit
git reset --soft (reseta o commit para o stage)
git reset --mixed (reseta o commit para modified)
git reset --hard (reseta o commit todo)


#Gerar key ssh
ssh-keygen -t rsa -b 4096 -C "cesd.domingues@gmail.com"

git remote add origin https://github.com/cesd/github-teste.git

git remote
git remote -vai

git push -u origin master 

#Subir uma modificação com push
git push origin master

#clonar repositorio
git@github.com:cesd/github-teste.git
git clone git@github.com:cesd/github-teste.git

#fork (pega um projeto e faz uma cópia)

#clone x fork
clone: só consigo fazer para os repositorios que são meus de fato

fork: Posso modificar um repósitorio que não é meu

#branch
É um ponteiro móvel que leva a um commit. Por padrão é branch master, mas eu posso ter outros branchs apontando para outros commits. Por que usar ?
Vantagens: 
-Posso modificar meus arquivos sem alterar o local principal
-Facilmente desligável (deletado)
-Múltiplas pessoas trabalhando. Um no master e os outros em outros branchs
-Evita conflitos

#Criando um branch
git checkout -b testing 

#ver brachs
git branch (* é o branch em que estou no momento)

#navegar entre branchs
git checkout nome_branch

#apagar branch (não posso estar nele)
git branch -D nome_branch

#merge (Depois de modificar um branch eu preciso uni-los)
#pros
-Operação não destrutiva, ele não vai destruir commit nenhum

#contra
-Commit extra para unir os outros
-Deixa o histórico poluído

#rebase
#pros
-Evita commits extras
-Histórico linear

#contra
-Perco a ordem cronológica
-Se eu mudo o histórico e tem outra pessoa trabalhando no memo branch ela não vai conseguir subir as coisas dela pq vai dar conflito 

